# -*- coding: utf-8 -*-
"""OM_EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1elC2dAHden577xqKzGnHIEU29dOUBTfV

EXPLORATORY DATA ANALYSIS
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
data = pd.read_csv("/content/Healthcare Providers.csv")
data.head()

# Descriptive statistics
data.describe()

from matplotlib import pyplot as plt
_df_6['National Provider Identifier'].plot(kind='line', figsize=(8, 4), title='National Provider Identifier')
plt.gca().spines[['top', 'right']].set_visible(False)

# information about the dataset
data.info()

numeric_columns = [
 'Number of Services',
 'Number of Medicare Beneficiaries',
 'Number of Distinct Medicare Beneficiary/Per Day Services',
 'Average Medicare Allowed Amount',
 'Average Submitted Charge Amount',
 'Average Medicare Payment Amount',
 'Average Medicare Standardized Amount'
]
for column in numeric_columns:
 data[column] = pd.to_numeric(data[column], errors='coerce')


data.info()

# Calculate the number of missing values in each column
missing_values = data.isnull().sum()
# Filter out columns with non-zero missing values
missing_values = missing_values[missing_values > 0]

# Create a bar chart
plt.figure(figsize=(10, 6))
missing_values.plot(kind='bar', color='skyblue')
plt.title('Missing Values in Each Column')
plt.xlabel('Columns')
plt.ylabel('Number of Missing Values')
plt.xticks(rotation=75)
plt.show()

# Imputation of missing values with mean
data[numeric_columns] = data[numeric_columns].fillna(data[numeric_columns].mean())
print(data.isnull().sum())

# Check for duplicates
print(data.duplicated().sum())

#data preeprocessing
# Merging the name columns into a single column
data['Full Name'] = data['First Name of the Provider'].fillna('') + ' ' + \
 data['Middle Initial of the Provider'].fillna('') + ' ' + \
 data['Last Name/Organization Name of the Provider'].fillna('')
data['Full Name'] = data['Full Name'].str.strip()
data = data.drop(columns=['Last Name/Organization Name of the Provider',
 'First Name of the Provider',
'Middle Initial of the Provider'])
data.head()

# Merging the address columns
data['Full Address'] = data['Street Address 1 of the Provider'].fillna('') + ' ' + \
 data['Street Address 2 of the Provider'].fillna('')
data['Full Address'] = data['Full Address'].str.strip()
data = data.drop(columns=['Street Address 1 of the Provider',
 'Street Address 2 of the Provider'])
data.head()

# Standardize credentials
data['Credentials of the Provider'] = data['Credentials of the Provider'].str.replace(r'\.', '', regex=True).str.upper()
data.head()

# Plot bar plot for Credentials of the Provider
credentials_counts = data['Credentials of the Provider'].value_counts().head(20)
plt.figure(figsize=(12, 6))
sns.barplot(x=credentials_counts.index, y=credentials_counts.values)
plt.title('Distribution of Provider Credentials')
plt.xlabel('Credentials')
plt.ylabel('Count')
plt.xticks(rotation=90)
plt.show()

state_counts = data['State Code of the Provider'].value_counts()
# bar graph for State Code of the Provider
plt.figure(figsize=(12, 6))
sns.barplot(x=state_counts.index, y=state_counts.values, palette='deep')
plt.title('Number of Providers by State')
plt.xlabel('State Code')
plt.ylabel('Count')
plt.xticks(rotation=90)
plt.show()

provider_type_counts = data['Provider Type'].value_counts().head(20)
# pie chart for Provider Types
plt.figure(figsize=(12, 14))
plt.pie(provider_type_counts, labels=provider_type_counts.index, autopct='%1.1f%%', startangle=90)
plt.title('Distribution of Provider Types')
plt.axis('equal')
plt.show()

# occurrences of each city
city_counts = data['City of the Provider'].value_counts().head(20)
# Plot of top 20 cities
sns.barplot(x=city_counts.index, y=city_counts.values, palette='dark')
plt.title('Top 20 Cities of the Providers')
plt.xlabel('City')
plt.ylabel('Count')
plt.xticks(rotation=90)
plt.show()

numeric_columns = [
 'Number of Services',
 'Average Medicare Allowed Amount',
 'Average Submitted Charge Amount',
 'Average Medicare Payment Amount'
]
for column in numeric_columns:
 data[column] = pd.to_numeric(data[column], errors='coerce')
plt.figure(figsize=(14, 12))
for i, column in enumerate(numeric_columns, 1):
 plt.subplot(2, 2, i)
 sns.histplot(data[column].dropna(), bins=30, kde=True, color='blue')
 plt.title(f'Distribution of {column}')
 plt.xlabel(column)
 plt.ylabel('Frequency')
plt.tight_layout()
plt.show()

corr_matrix = data[numeric_columns].corr()
#correlation heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix of Numerical Columns')
plt.show()

# point plot to show the relationship between average Number of Services by State Code of the Provide
plt.figure(figsize=(14, 8))
sns.countplot(x='State Code of the Provider', hue='Gender of the Provider', data=data)
plt.title('Average Number of Services by State and Gender')
plt.xlabel('State Code')
plt.ylabel('Number of Services')
plt.xticks(rotation=90)
plt.show()

#pairplot for numeric values

import matplotlib.pyplot as plt
sns.pairplot(data[numeric_columns])
plt.title('Pairplot of Numerical Variables')
plt.show()