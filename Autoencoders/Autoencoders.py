# -*- coding: utf-8 -*-
"""eda.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1veJQJupR3ftKRauV3sbsSefNAUmYhXaN

# **IMPORTING DEPENDENCIES**
"""

from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.callbacks import ReduceLROnPlateau

df = pd.read_csv("/content/HealthcareProviders.csv")

df_org = df

"""# **BASIC EXPLORATION OF THE DATASET**"""

df.describe(include='all')

"""** ADDING A NEW COLUMN "MONEY DIFFERENCE" IN THE DATASET WHICH CALCULATES THE DIFFERENCE BETWEEN "AVERAGE SUBMITTED CHARGE AMOUNT" COLUMN AND THE "AVERAGE MEDICARE PAYMENT AMOUNT" COLUMN**"""

df["Average Submitted Charge Amount"] = df["Average Submitted Charge Amount"].replace(',', '', regex=True)

df["Average Medicare Payment Amount"] = df["Average Medicare Payment Amount"].replace(',', '', regex=True)

df["Money difference"] = df["Average Submitted Charge Amount"].astype(float) - df["Average Medicare Payment Amount"].astype(float)

"""# **Basic exploration of the dataset with the new column**"""

df.nunique()

(df.isnull().sum()/(len(df)))*100

df.describe(include='all').T

"""**Dropping different irrelevant fields throughout the process**"""

df = df.drop(columns=['index', 'National Provider Identifier','Street Address 1 of the Provider','Street Address 2 of the Provider','Country Code of the Provider'])

df['Last Name/Organization Name of the Provider'] = df['First Name of the Provider'].astype(str) + " " + df['Last Name/Organization Name of the Provider']

df.head()

df=df.drop(columns=['First Name of the Provider'])

df.head()

df.rename(columns = {'Last Name/Organization Name of the Provider':'Full name'}, inplace = True)

df.head()

df=df.drop(columns=['HCPCS Description'])

df.head()

plt.figure(figsize=(16,5))
plt.subplot(1,2,1)
sns.histplot(df['Money difference'], kde=True)

plt.show()

"""### Scaling the numerical fields using the formula of standard scaler"""

scaler = StandardScaler()

df['Money difference'] = scaler.fit_transform(df[['Money difference']])

display(df)

df['Average Medicare Payment Amount'] = scaler.fit_transform(df[['Average Medicare Payment Amount']])

display(df)

df['Average Submitted Charge Amount'] = scaler.fit_transform(df[['Average Submitted Charge Amount']])

display(df)

df.head()

df["Average Medicare Allowed Amount"] = df["Average Medicare Allowed Amount"].replace('.', '', regex=True)

df["Number of Services"] = df["Number of Services"].replace(',', '', regex=True)

df["Number of Medicare Beneficiaries"] = df["Number of Medicare Beneficiaries"].replace(',', '', regex=True)

df["Number of Distinct Medicare Beneficiary/Per Day Services"] = df["Number of Distinct Medicare Beneficiary/Per Day Services"].replace(',', '', regex=True)

df.drop(columns=['Average Medicare Allowed Amount','Average Medicare Standardized Amount',], inplace=True)

df.head()

mean = np.mean(df["Money difference"])
std = np.std(df["Money difference"])
print('mean of the dataset is', mean)
print('std. deviation is', std)

threshold = 3
outlier = []
for i in df["Money difference"]:
    z = (i-mean)/std
    if z > threshold:
        outlier.append(i)
print('outlier in dataset is', outlier)

"""### Appending a column called Z-score to the dataset to store the Z-score of each row"""

df["Z-score"] = (df["Money difference"] - mean)/std

"""### Making a column called Fraud that represents if we consider the data to be a fraudulent data or not depending on the Z-score. If the Z-score is above 3 then we consider it to be anomalous/fraudulent or if the Z-score is less then we consider it normal."""

df['Fraud'] = df['Z-score'].apply(lambda x: 0 if x <= 3 else 1)

df.head()

df['Fraud'].value_counts()

df.nunique()

df.drop(columns=['Zip Code of the Provider'], inplace=True)

df.head()

"""### Applying One hot encoding the the columns with few categories"""

df = pd.get_dummies(df, columns=['Gender of the Provider','Entity Type of the Provider','Place of Service','Medicare Participation Indicator','HCPCS Drug Indicator'], dtype='int')

df.head()

df.info()

df.drop(columns=['State Code of the Provider'], inplace=True)

"""### Applying label encoding the fields with large no. of categories"""

from sklearn import preprocessing

label_encoder = preprocessing.LabelEncoder()

df['Provider Type'] = label_encoder.fit_transform(df['Provider Type'])

df_frequencies = df['Provider Type'].value_counts()

df_frequency_map = df_frequencies.to_dict()

df['Provider Type'] = df['Provider Type'].map(df_frequency_map)

df.head()

df.drop(columns=['City of the Provider'], inplace=True)

df.head()

df.drop(columns=['Full name','Middle Initial of the Provider','Credentials of the Provider'], inplace=True)

df.head()

df['Fraud'].value_counts()

df['Number of Services'] = scaler.fit_transform(df[['Number of Services']])

df['Number of Medicare Beneficiaries'] = scaler.fit_transform(df[['Number of Medicare Beneficiaries']])

df['Number of Distinct Medicare Beneficiary/Per Day Services'] = scaler.fit_transform(df[['Number of Distinct Medicare Beneficiary/Per Day Services']])

df.head()

"""### Dropping the Fraud column to avoid bias in the model while training"""

df.drop(columns=['Fraud'], inplace=True)

df.drop(columns=['HCPCS Code'], inplace=True)

df.head()

"""### **Autoencoders**"""

import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Dense
from tensorflow.keras import regularizers
from sklearn.metrics import mean_squared_error

X = df

input_dim = X.shape[1]
encoding_dim = 32

input_layer = Input(shape=(input_dim,))
encoder = Dense(encoding_dim, activation="relu", activity_regularizer=regularizers.l1(10e-5))(input_layer)
encoder = Dense(16, activation="relu")(encoder)
encoder = Dense(2, activation="relu")(encoder)
encoder = Dense(16, activation="relu")(encoder)
decoder = Dense(32, activation="relu")(encoder)
decoder = Dense(input_dim, activation="relu")(decoder)

autoencoder = Model(inputs=input_layer, outputs=decoder)
autoencoder.compile(optimizer='adam', loss='mean_squared_error')

autoencoder.summary()

tf.keras.utils.plot_model(
    autoencoder,
    to_file='model.png',
    show_shapes=True,
    show_dtype=True,
    show_layer_names=True,
    rankdir='TB',
    expand_nested=False,
    dpi=200,
    show_layer_activations=True,
    show_trainable=False,
)

history = autoencoder.fit(X, X, epochs=50, batch_size=32, shuffle=True, validation_split=0.2)

labels = autoencoder.predict(X)
mse = np.mean(np.power(X - labels, 2), axis=1)

threshold = np.percentile(mse, 99)
anomalies = mse > threshold

print(f"Threshold: {threshold}")
print(f"Number of anomalies detected: {np.sum(anomalies)}")

df_org['anomaly'] = anomalies

df_org['anomaly'] = df_org['anomaly'].apply(lambda x: 1 if x == True else 0)

df['anomaly'] = df_org['anomaly']

df_org.head()

list(df_org['anomaly']).count(0)

inliers = df_org[df_org['anomaly'] == 0]
anomalies = df_org[df_org['anomaly'] == 1]

# Function to plot categorical feature distributions
def plot_categorical_feature(df_org, feature):
    fig, ax = plt.subplots(1, 2, figsize=(14, 6), sharey=True)

    # Plot for inliers
    inliers[feature].value_counts().plot(kind='bar', ax=ax[0], color='green', alpha=0.6)
    ax[0].set_title(f'Inliers - {feature}')
    ax[0].set_ylabel('Count')

    # Plot for anomalies
    anomalies[feature].value_counts().plot(kind='bar', ax=ax[1], color='red', alpha=0.6)
    ax[1].set_title(f'Anomalies - {feature}')

    plt.show()

# Plot the categorical features
plot_categorical_feature(df_org, 'Gender of the Provider')
plot_categorical_feature(df_org, 'Entity Type of the Provider')
plot_categorical_feature(df_org, 'Place of Service')
plot_categorical_feature(df_org, 'Medicare Participation Indicator')
plot_categorical_feature(df_org, 'HCPCS Drug Indicator')

normal_data = df[df['anomaly'] == 0]
anomalous_data = df[df['anomaly'] == 1]

plt.scatter(normal_data['Average Submitted Charge Amount'], normal_data['Average Medicare Payment Amount'], c='green', label='Normal')
plt.scatter(anomalous_data['Average Submitted Charge Amount'], anomalous_data['Average Medicare Payment Amount'], c='red', label='Anomaly')
plt.xlabel('Average Submitted Charge Amount')
plt.ylabel('Average Medicare Payment Amount')
plt.title('Scatter Plot of Anomalies vs Normal Data')
plt.legend()
plt.show()

plt.scatter(normal_data['Average Submitted Charge Amount'], normal_data['Money difference'], c='green', label='Normal')
plt.scatter(anomalous_data['Average Submitted Charge Amount'], anomalous_data['Money difference'], c='red', label='Anomaly')
plt.xlabel('Average Submitted Charge Amount')
plt.ylabel('Money difference')
plt.title('Scatter Plot of Anomalies vs Normal Data')
plt.legend()
plt.show()

plt.scatter(normal_data['Average Medicare Payment Amount'], normal_data['Money difference'], c='green', label='Normal')
plt.scatter(anomalous_data['Average Medicare Payment Amount'], anomalous_data['Money difference'], c='red', label='Anomaly')
plt.xlabel('Average Medicare Payment Amount')
plt.ylabel('Money difference')
plt.title('Scatter Plot of Anomalies vs Normal Data')
plt.legend()
plt.show()

plt.scatter(normal_data['Number of Services'], normal_data['Money difference'], c='green', label='Normal')
plt.scatter(anomalous_data['Number of Services'], anomalous_data['Money difference'], c='red', label='Anomaly')
plt.xlabel('Number of Services')
plt.ylabel('Money difference')
plt.title('Scatter Plot of Anomalies vs Normal Data')
plt.legend()
plt.show()

plt.scatter(normal_data['Number of Medicare Beneficiaries'], normal_data['Money difference'], c='green', label='Normal')
plt.scatter(anomalous_data['Number of Medicare Beneficiaries'], anomalous_data['Money difference'], c='red', label='Anomaly')
plt.xlabel('Number of Medicare Beneficiaries')
plt.ylabel('Money difference')
plt.title('Scatter Plot of Anomalies vs Normal Data')
plt.legend()
plt.show()

plt.scatter(normal_data['Number of Distinct Medicare Beneficiary/Per Day Services'], normal_data['Money difference'], c='green', label='Normal')
plt.scatter(anomalous_data['Number of Distinct Medicare Beneficiary/Per Day Services'], anomalous_data['Money difference'], c='red', label='Anomaly')
plt.xlabel('Number of Distinct Medicare Beneficiary/Per Day Services')
plt.ylabel('Money difference')
plt.title('Scatter Plot of Anomalies vs Normal Data')
plt.legend()
plt.show()