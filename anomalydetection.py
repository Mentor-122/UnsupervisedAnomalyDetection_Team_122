# -*- coding: utf-8 -*-
"""AnomalyDetection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nRSfayraLdg3D8r7oxTOeiavL19D1YwM

**`AnomaltDetection`**
"""

# import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as py
import seaborn as sns


#warnings
import warnings
warnings.filterwarnings("ignore")

pd.set_option("display.max_rows",None)
pd.set_option("display.max_columns",None)
# load data into the dataframe
df_raw = pd.read_csv("/content/Healthcare Providers.csv")
df_raw.head()

df_raw.shape

df_raw.columns

DropCols = ['index', 'National Provider Identifier','Last Name/Organization Name of the Provider',
       'First Name of the Provider', 'Middle Initial of the Provider','Street Address 1 of the Provider',
       'Street Address 2 of the Provider','Zip Code of the Provider',"HCPCS Code"]
df_cur1 = df_raw.drop(DropCols, axis = 1)
df_cur1.info()

100*df_cur1.isnull().sum()/len(df_cur1)

print('Frequenty appearing value in "Credentials of the Provider" feature is  ',df_cur1["Credentials of the Provider"].mode()[0])
print('Frequenty appearing value in "Gender of the Provider" feature is  ' ,df_cur1['Gender of the Provider'].mode()[0])

df_cur1["Credentials of the Provider"] = df_cur1["Credentials of the Provider"].fillna(df_cur1["Credentials of the Provider"].mode()[0])
df_cur1["Gender of the Provider"] = df_cur1["Gender of the Provider"].fillna(df_cur1["Gender of the Provider"].mode()[0])

100*df_cur1.isnull().sum()/len(df_cur1)

df_cur1.describe()

int_cols = ['Number of Services','Number of Medicare Beneficiaries',
            "Number of Distinct Medicare Beneficiary/Per Day Services",
            'Average Medicare Allowed Amount','Average Submitted Charge Amount',
            'Average Medicare Payment Amount','Average Medicare Standardized Amount']
df_cur1[int_cols].describe()

def remove_comma(x):
    return x.replace(",","")

for col in int_cols:
    df_cur1[col] = pd.to_numeric(df_cur1[col].apply(lambda x: remove_comma(x)),errors= "ignore")
df_cur1[int_cols].describe()

for col in df_cur1.columns:
    if col not in int_cols:
        print(col)
        print(df_cur1[col].value_counts())