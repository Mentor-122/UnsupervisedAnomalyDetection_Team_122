# -*- coding: utf-8 -*-
"""eda.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1veJQJupR3ftKRauV3sbsSefNAUmYhXaN

# **IMPORTING DEPENDENCIES**
"""

from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib
from sklearn.preprocessing import StandardScaler

df = pd.read_csv("/content/HealthcareProviders.csv")

df_org = df

"""# **BASIC EXPLORATION OF THE DATASET**"""

df.describe(include='all')

"""** ADDING A NEW COLUMN "MONEY DIFFERENCE" IN THE DATASET WHICH CALCULATES THE DIFFERENCE BETWEEN "AVERAGE SUBMITTED CHARGE AMOUNT" COLUMN AND THE "AVERAGE MEDICARE PAYMENT AMOUNT" COLUMN**"""

df["Average Submitted Charge Amount"] = df["Average Submitted Charge Amount"].replace(',', '', regex=True)

df["Average Medicare Payment Amount"] = df["Average Medicare Payment Amount"].replace(',', '', regex=True)

df["Money difference"] = df["Average Submitted Charge Amount"].astype(float) - df["Average Medicare Payment Amount"].astype(float)

"""# **Basic exploration of the dataset with the new column**"""

df.nunique()

(df.isnull().sum()/(len(df)))*100

df.describe(include='all').T

"""**Dropping different irrelevant fields throughout the process**"""

df = df.drop(columns=['index', 'National Provider Identifier','Street Address 1 of the Provider','Street Address 2 of the Provider','Country Code of the Provider'])

df['Last Name/Organization Name of the Provider'] = df['First Name of the Provider'].astype(str) + " " + df['Last Name/Organization Name of the Provider']

df.head()

df=df.drop(columns=['First Name of the Provider'])

df.head()

df.rename(columns = {'Last Name/Organization Name of the Provider':'Full name'}, inplace = True)

df.head()

df=df.drop(columns=['HCPCS Description'])

df.head()

plt.figure(figsize=(16,5))
plt.subplot(1,2,1)
sns.histplot(df['Money difference'], kde=True)

plt.show()

"""### Scaling the numerical fields using the formula of standard scaler"""

scaler = StandardScaler()

df['Money difference'] = scaler.fit_transform(df[['Money difference']])

display(df)

df['Average Medicare Payment Amount'] = scaler.fit_transform(df[['Average Medicare Payment Amount']])

display(df)

df['Average Submitted Charge Amount'] = scaler.fit_transform(df[['Average Submitted Charge Amount']])

display(df)

df.head()

df["Average Medicare Allowed Amount"] = df["Average Medicare Allowed Amount"].replace('.', '', regex=True)

df["Number of Services"] = df["Number of Services"].replace(',', '', regex=True)

df["Number of Medicare Beneficiaries"] = df["Number of Medicare Beneficiaries"].replace(',', '', regex=True)

df["Number of Distinct Medicare Beneficiary/Per Day Services"] = df["Number of Distinct Medicare Beneficiary/Per Day Services"].replace(',', '', regex=True)

df.drop(columns=['Average Medicare Allowed Amount','Average Medicare Standardized Amount',], inplace=True)

df.head()

mean = np.mean(df["Money difference"])
std = np.std(df["Money difference"])
print('mean of the dataset is', mean)
print('std. deviation is', std)

threshold = 3
outlier = []
for i in df["Money difference"]:
    z = (i-mean)/std
    if z > threshold:
        outlier.append(i)
print('outlier in dataset is', outlier)

"""### Appending a column called Z-score to the dataset to store the Z-score of each row"""

df["Z-score"] = (df["Money difference"] - mean)/std

"""### Making a column called Fraud that represents if we consider the data to be a fraudulent data or not depending on the Z-score. If the Z-score is above 3 then we consider it to be anomalous/fraudulent or if the Z-score is less then we consider it normal."""

df['Fraud'] = df['Z-score'].apply(lambda x: 0 if x <= 3 else 1)

df.head()

df['Fraud'].value_counts()

df.nunique()

df.drop(columns=['Zip Code of the Provider'], inplace=True)

df.head()

"""### Applying One hot encoding the the columns with few categories"""

df = pd.get_dummies(df, columns=['Gender of the Provider','Entity Type of the Provider','Place of Service','Medicare Participation Indicator','HCPCS Drug Indicator'], dtype='int')

df.head()

df.info()

df.drop(columns=['State Code of the Provider'], inplace=True)

"""### Applying label encoding the fields with large no. of categories"""

from sklearn import preprocessing

label_encoder = preprocessing.LabelEncoder()

df['Provider Type'] = label_encoder.fit_transform(df['Provider Type'])

df_frequencies = df['Provider Type'].value_counts()

df_frequency_map = df_frequencies.to_dict()

df['Provider Type'] = df['Provider Type'].map(df_frequency_map)

df.head()

df.drop(columns=['City of the Provider'], inplace=True)

df.head()

df.drop(columns=['Full name','Middle Initial of the Provider','Credentials of the Provider'], inplace=True)

df.head()

df['Fraud'].value_counts()

df['Number of Services'] = scaler.fit_transform(df[['Number of Services']])

df['Number of Medicare Beneficiaries'] = scaler.fit_transform(df[['Number of Medicare Beneficiaries']])

df['Number of Distinct Medicare Beneficiary/Per Day Services'] = scaler.fit_transform(df[['Number of Distinct Medicare Beneficiary/Per Day Services']])

df.head()

"""### Dropping the Fraud column to avoid bias in the model while training"""

df.drop(columns=['Fraud'], inplace=True)

df.drop(columns=['HCPCS Code'], inplace=True)

df.head()

"""### **Fitting Isolation Forest model to our dataset and predicting anomalies**"""

from sklearn.metrics import classification_report,accuracy_score
from sklearn.ensemble import IsolationForest
from sklearn.neighbors import LocalOutlierFactor
from sklearn.svm import OneClassSVM
from pylab import rcParams

from sklearn.decomposition import PCA

X = df

iso_forest = IsolationForest(contamination=0.01, random_state=42)

iso_forest.fit(X)

labels = iso_forest.predict(X)
scores = iso_forest.decision_function(X)

df_org['Anomaly'] = labels

list(labels).count(-1)

list(labels).count(1)

result = df.iloc[:, [4, 5]].to_numpy()

result

X_transformed = result

plt.figure(figsize=(10, 6))

plt.scatter(X_transformed[labels == 1][:, 0], X_transformed[labels == 1][:, 1], c='green', label='Normal')

plt.scatter(X_transformed[labels == -1][:, 0], X_transformed[labels == -1][:, 1], c='red', label='Anomaly')

plt.legend()
plt.title('Isolation Forest Results')
plt.xlabel('Average Submitted Charge Amount')
plt.ylabel('Average Medicare Payment Amount')
plt.show()

"""The above graph represents the distribution of anomalies on the basis of Avergae Medicare Payment Amount and Average Submitted Charge Amount columns"""

result = df.iloc[:, [4, 6]].to_numpy()

X_transformed = result

plt.figure(figsize=(10, 6))

plt.scatter(X_transformed[labels == 1][:, 0], X_transformed[labels == 1][:, 1], c='green', label='Normal')

plt.scatter(X_transformed[labels == -1][:, 0], X_transformed[labels == -1][:, 1], c='red', label='Anomaly')

plt.legend()
plt.title('Isolation Forest Results')
plt.xlabel('Average Submitted Charge Amount')
plt.ylabel('Money difference')
plt.show()

"""The above graph represents the distribution of anomalies on the basis of Money difference and Average Submitted Charge Amount columns"""

result = df.iloc[:, [5, 6]].to_numpy()

X_transformed = result

plt.figure(figsize=(10, 6))

plt.scatter(X_transformed[labels == 1][:, 0], X_transformed[labels == 1][:, 1], c='green', label='Normal')

plt.scatter(X_transformed[labels == -1][:, 0], X_transformed[labels == -1][:, 1], c='red', label='Anomaly')

plt.legend()
plt.title('Isolation Forest Results')
plt.xlabel('Average Medicare Payment Amount')
plt.ylabel('Money difference')
plt.show()

"""The above graph represents the distribution of anomalies on the basis of Money difference and Average Medicare Payment Amount columns"""

result = df.iloc[:, [1, 6]].to_numpy()

X_transformed = result

plt.figure(figsize=(10, 6))

plt.scatter(X_transformed[labels == 1][:, 0], X_transformed[labels == 1][:, 1], c='green', label='Normal')

plt.scatter(X_transformed[labels == -1][:, 0], X_transformed[labels == -1][:, 1], c='red', label='Anomaly')

plt.legend()
plt.title('Isolation Forest Results')
plt.xlabel('Number of Services')
plt.ylabel('Money difference')
plt.show()

"""The above graph represents the distribution of anomalies on the basis of Money difference and Number of Services columns"""

result = df.iloc[:, [2, 6]].to_numpy()

X_transformed = result

plt.figure(figsize=(10, 6))

plt.scatter(X_transformed[labels == 1][:, 0], X_transformed[labels == 1][:, 1], c='green', label='Normal')

plt.scatter(X_transformed[labels == -1][:, 0], X_transformed[labels == -1][:, 1], c='red', label='Anomaly')

plt.legend()
plt.title('Isolation Forest Results')
plt.xlabel('Number of Medicare Beneficiaries')
plt.ylabel('Money difference')
plt.show()

"""The above graph represents the distribution of anomalies on the basis of Money difference and Number of Medicare Beneficiaries columns"""

result = df.iloc[:, [3, 6]].to_numpy()

X_transformed = result

plt.figure(figsize=(10, 6))

plt.scatter(X_transformed[labels == 1][:, 0], X_transformed[labels == 1][:, 1], c='green', label='Normal')

plt.scatter(X_transformed[labels == -1][:, 0], X_transformed[labels == -1][:, 1], c='red', label='Anomaly')

plt.legend()
plt.title('Isolation Forest Results')
plt.xlabel('Number of Distinct Medicare Beneficiary/Per Day Services')
plt.ylabel('Money difference')
plt.show()

"""The above graph represents the distribution of anomalies on the basis of Money difference and Number of Medicare Benficiary/Per Day Services columns"""

inliers = df_org[df_org['Anomaly'] == 1]
anomalies = df_org[df_org['Anomaly'] == -1]

# Function to plot categorical feature distributions
def plot_categorical_feature(df_org, feature):
    fig, ax = plt.subplots(1, 2, figsize=(14, 6), sharey=True)

    # Plot for inliers
    inliers[feature].value_counts().plot(kind='bar', ax=ax[0], color='green', alpha=0.6)
    ax[0].set_title(f'Inliers - {feature}')
    ax[0].set_ylabel('Count')

    # Plot for anomalies
    anomalies[feature].value_counts().plot(kind='bar', ax=ax[1], color='red', alpha=0.6)
    ax[1].set_title(f'Anomalies - {feature}')

    plt.show()

# Plot the categorical features
plot_categorical_feature(df_org, 'Gender of the Provider')
plot_categorical_feature(df_org, 'Entity Type of the Provider')
plot_categorical_feature(df_org, 'Place of Service')
plot_categorical_feature(df_org, 'Medicare Participation Indicator')
plot_categorical_feature(df_org, 'HCPCS Drug Indicator')

"""The above bar graphs shows us the distribution of anomalies in the categorical columns

### **Using Elliptic Envelope to fit on the dataset and predicting anomalies**
"""

from sklearn.covariance import EllipticEnvelope

elliptic_env = EllipticEnvelope(contamination=0.0127, random_state=42)

elliptic_env.fit(X)

labels = elliptic_env.predict(X)

scores = elliptic_env.decision_function(X)

df_org['Anomaly'] = labels

list(labels).count(-1)

list(labels).count(1)

result = df.iloc[:, [4, 5]].to_numpy()

X_transformed = result

plt.figure(figsize=(10, 6))

# Plot inliers
plt.scatter(X_transformed[labels == 1][:, 0], X_transformed[labels == 1][:, 1], c='green', label='Normal')

# Plot anomalies
plt.scatter(X_transformed[labels == -1][:, 0], X_transformed[labels == -1][:, 1], c='red', label='Anomalies')

plt.legend()
plt.title('Elliptic Envelope - Anomaly Detection')
plt.xlabel('Average Submitted Charge Amount')
plt.ylabel('Average Medicare Payment Amount')
plt.show()

"""The above graph represents the distribution of anomalies on the basis of Avergae Medicare Payment Amount and Average Submitted Charge Amount columns"""

result = df.iloc[:, [4, 6]].to_numpy()

X_transformed = result

plt.figure(figsize=(10, 6))

# Plot inliers
plt.scatter(X_transformed[labels == 1][:, 0], X_transformed[labels == 1][:, 1], c='green', label='Normal')

# Plot anomalies
plt.scatter(X_transformed[labels == -1][:, 0], X_transformed[labels == -1][:, 1], c='red', label='Anomalies')

plt.legend()
plt.title('Elliptic Envelope - Anomaly Detection')
plt.xlabel('Average Submitted Charge Amount')
plt.ylabel('Money Difference')
plt.show()

"""The above graph represents the distribution of anomalies on the basis of Money difference and Average Submitted Charge Amount columns


"""

result = df.iloc[:, [5, 6]].to_numpy()

X_transformed = result

plt.figure(figsize=(10, 6))

# Plot inliers
plt.scatter(X_transformed[labels == 1][:, 0], X_transformed[labels == 1][:, 1], c='green', label='Normal')

# Plot anomalies
plt.scatter(X_transformed[labels == -1][:, 0], X_transformed[labels == -1][:, 1], c='red', label='Anomalies')

plt.legend()
plt.title('Elliptic Envelope - Anomaly Detection')
plt.xlabel('Average Medicare Payment Amount')
plt.ylabel('Money Difference')
plt.show()

"""The above graph represents the distribution of anomalies on the basis of Money difference and Average Medicare Payment Amount columns"""

result = df.iloc[:, [1, 6]].to_numpy()

X_transformed = result

plt.figure(figsize=(10, 6))

# Plot inliers
plt.scatter(X_transformed[labels == 1][:, 0], X_transformed[labels == 1][:, 1], c='green', label='Normal')

# Plot anomalies
plt.scatter(X_transformed[labels == -1][:, 0], X_transformed[labels == -1][:, 1], c='red', label='Anomalies')


plt.legend()
plt.title('Elliptic Envelope - Anomaly Detection')
plt.xlabel('Number of Services')
plt.ylabel('Money Difference')
plt.show()

"""The above graph represents the distribution of anomalies on the basis of Money difference and Number of Services columns"""

result = df.iloc[:, [2, 6]].to_numpy()

X_transformed = result

plt.figure(figsize=(10, 6))

# Plot inliers
plt.scatter(X_transformed[labels == 1][:, 0], X_transformed[labels == 1][:, 1], c='green', label='Normal')

# Plot anomalies
plt.scatter(X_transformed[labels == -1][:, 0], X_transformed[labels == -1][:, 1], c='red', label='Anomalies')

plt.legend()
plt.title('Elliptic Envelope - Anomaly Detection')
plt.xlabel('Number of Medicare Beneficiaries')
plt.ylabel('Money Difference')
plt.show()

"""The above graph represents the distribution of anomalies on the basis of Money difference and Number of Medicare Benficiary columns"""

result = df.iloc[:, [3, 6]].to_numpy()

X_transformed = result

plt.figure(figsize=(10, 6))

# Plot inliers
plt.scatter(X_transformed[labels == 1][:, 0], X_transformed[labels == 1][:, 1], c='green', label='Normal')

# Plot anomalies
plt.scatter(X_transformed[labels == -1][:, 0], X_transformed[labels == -1][:, 1], c='red', label='Anomalies')

plt.legend()
plt.title('Elliptic Envelope - Anomaly Detection')
plt.xlabel('Number of Distinct Medicare Beneficiary/Per Day Services')
plt.ylabel('Money Difference')
plt.show()

"""The above graph represents the distribution of anomalies on the basis of Money difference and Number of Medicare Benficiary/Per Day Services columns"""

inliers = df_org[df_org['Anomaly'] == 1]
anomalies = df_org[df_org['Anomaly'] == -1]

# Function to plot categorical feature distributions
def plot_categorical_feature(df_org, feature):
    fig, ax = plt.subplots(1, 2, figsize=(14, 6), sharey=True)

    # Plot for inliers
    inliers[feature].value_counts().plot(kind='bar', ax=ax[0], color='green', alpha=0.6)
    ax[0].set_title(f'Inliers - {feature}')
    ax[0].set_ylabel('Count')

    # Plot for anomalies
    anomalies[feature].value_counts().plot(kind='bar', ax=ax[1], color='red', alpha=0.6)
    ax[1].set_title(f'Anomalies - {feature}')

    plt.show()

# Plot the categorical features
plot_categorical_feature(df_org, 'Gender of the Provider')
plot_categorical_feature(df_org, 'Entity Type of the Provider')
plot_categorical_feature(df_org, 'Place of Service')
plot_categorical_feature(df_org, 'Medicare Participation Indicator')
plot_categorical_feature(df_org, 'HCPCS Drug Indicator')

"""The above bar graphs shows us the distribution of anomalies in the categorical columns"""

df.drop(columns=['Number of Distinct Medicare Beneficiary/Per Day Services','Number of Medicare Beneficiaries','Number of Services'], inplace=True)

"""### **Using One Class SVM to fit on the dataset and predicting anomalies**"""

ocsvm = OneClassSVM(kernel='rbf', gamma=0.1, nu=0.01)

ocsvm.fit(X)

labels = ocsvm.predict(X)

scores = ocsvm.decision_function(X)

df_org['Anomaly'] = labels

result = df.iloc[:, [1, 2]].to_numpy()

X_transformed = result

plt.figure(figsize=(10, 6))

# Plot inliers
plt.scatter(X_transformed[labels == 1][:, 0], X_transformed[labels == 1][:, 1], c='green', label='Normal')

# Plot anomalies
plt.scatter(X_transformed[labels == -1][:, 0], X_transformed[labels == -1][:, 1], c='red', label='Anomalies')

plt.legend()
plt.title('One-Class SVM - Anomaly Detection')
plt.xlabel('Average Submitted Charge Amount')
plt.ylabel('Average Medicare Payment Amount')
plt.show()

"""The above graph represents the distribution of anomalies on the basis of Average Medicare Payment Amount and Average Submitted Charge Amount columns"""

list(labels).count(-1)

list(labels).count(1)

result = df.iloc[:, [1, 3]].to_numpy()

X_transformed = result

plt.figure(figsize=(10, 6))

# Plot inliers
plt.scatter(X_transformed[labels == 1][:, 0], X_transformed[labels == 1][:, 1], c='green', label='Normal')

# Plot anomalies
plt.scatter(X_transformed[labels == -1][:, 0], X_transformed[labels == -1][:, 1], c='red', label='Anomalies')

plt.legend()
plt.title('One-Class SVM - Anomaly Detection')
plt.xlabel('Average Submitted Charge Amount')
plt.ylabel('Money difference')
plt.show()

"""The above graph represents the distribution of anomalies on the basis of Money difference and Average Submitted Charge Amount columns"""

result = df.iloc[:, [2, 3]].to_numpy()

X_transformed = result

plt.figure(figsize=(10, 6))

# Plot inliers
plt.scatter(X_transformed[labels == 1][:, 0], X_transformed[labels == 1][:, 1], c='green', label='Normal')

# Plot anomalies
plt.scatter(X_transformed[labels == -1][:, 0], X_transformed[labels == -1][:, 1], c='red', label='Anomalies')

plt.legend()
plt.title('One-Class SVM - Anomaly Detection')
plt.xlabel('Average Medicare Payment Amount')
plt.ylabel('Money Difference')
plt.show()

"""The above graph represents the distribution of anomalies on the basis of Money difference and Average Medicare Payment Amount columns"""

inliers = df_org[df_org['Anomaly'] == 1]
anomalies = df_org[df_org['Anomaly'] == -1]

# Function to plot categorical feature distributions
def plot_categorical_feature(df_org, feature):
    fig, ax = plt.subplots(1, 2, figsize=(14, 6), sharey=True)

    # Plot for inliers
    inliers[feature].value_counts().plot(kind='bar', ax=ax[0], color='green', alpha=0.6)
    ax[0].set_title(f'Inliers - {feature}')
    ax[0].set_ylabel('Count')

    # Plot for anomalies
    anomalies[feature].value_counts().plot(kind='bar', ax=ax[1], color='red', alpha=0.6)
    ax[1].set_title(f'Anomalies - {feature}')

    plt.show()

# Plot the categorical features
plot_categorical_feature(df_org, 'Gender of the Provider')
plot_categorical_feature(df_org, 'Entity Type of the Provider')
plot_categorical_feature(df_org, 'Place of Service')
plot_categorical_feature(df_org, 'Medicare Participation Indicator')
plot_categorical_feature(df_org, 'HCPCS Drug Indicator')

"""The above bar graphs shows us the distribution of anomalies in the categorical columns

**In the above the code we implemented three anomaly detection models: Isolation Forest, Elliptic Envelope and One Class SVM. The three models were fit to the dataset and they were used to predict and mark anomalies in the dataset. The Isolation Forest model marked 1000 anomalies, the Elliptic Envelope marked 1270 anomalies and the One Class SVM marked 1050. All the results are really similar to each so we can assume that the number of anomalies lie in the 1000 to 1200 range. The plots are also useful in us visualizing the distribution of anomalies in the dataset. The bar plots are also used to visualize the distribution of anomalies in the categorical columns. We can also infer from the models that the number of anomalies is really less which is roughly about 1% of the total dataset.**
"""